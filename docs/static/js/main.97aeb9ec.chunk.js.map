{"version":3,"sources":["Components/GifTemplate.js","Components/Helpers/GetGifs.js","Components/GifGrid.js","Components/Hooks/useFetchsGifs.js","Components/SearchBar.js","GifExpertApp.js","index.js"],"names":["GifTemplate","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","useState","loading","state","setState","useEffect","then","imgs","useFetchGifs","SearchBar","setCategories","busqueda","setBusqueda","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","GifExpertApp","categories","categoria","ruta","document","getElementById","cuerpo","ReactDOM","render"],"mappings":"wLAEaA,EAAc,SAAC,GAAoB,EAAnBC,GAAoB,IAAhBC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,IACpC,OACI,sBAAKC,UAAU,6CAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,mBAAGE,UAAU,aAAb,SAA2BF,Q,uBCN1BK,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbN,EAFa,iDAEmCO,UAAUF,GAF7C,+DAIAG,MAAMR,GAJN,cAIbS,EAJa,gBAKEA,EAAKC,OALP,uBAKZC,EALY,EAKZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACxB,MAAM,CACFhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAXvB,kBAcZY,GAdY,4CAAH,sDCsBLK,EAjBC,SAAC,GAAgB,IAAfZ,EAAc,EAAdA,SAEd,ECJwB,SAACA,GACzB,MAA0Ba,mBAAS,CAC/BP,KAAK,GACLQ,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAU,WACNlB,EAAQC,GACHkB,MAAK,SAAAC,GACEH,EAAS,CACLV,KAAMa,EACNL,SAAS,SAG3B,CAACd,IAEIe,EDZwBK,CAAapB,GAAhCU,EAAZ,EAAOJ,KAAaQ,EAApB,EAAoBA,QAEpB,OACI,gCACI,oBAAIlB,UAAU,kBAAd,SAAiCI,IAChCc,GAAW,mBAAGlB,UAAU,wCAAb,yCACZ,qBAAKA,UAAU,OAAf,SAEGc,EAAOF,KAAI,SAAAC,GAAG,OAAI,cAAC,EAAD,eAA8BA,GAAZA,EAAIhB,a,OEX1C4B,EAAY,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEvB,EAAgCT,mBAAS,IAAzC,mBAAOU,EAAP,KAAiBC,EAAjB,KAaA,OACI,sBAAMC,SARS,SAAAC,GACfA,EAAEC,iBAEFL,GAAc,SAAAI,GAAC,OAAGH,GAAH,mBAAgBG,OAC/BF,EAAY,KAIZ,SACI,uBACAI,KAAK,OACLC,YAAY,aACZC,MAAOP,EACPQ,SAjBe,SAACL,GACpBF,EAAYE,EAAEM,OAAOF,aCLhBG,EAAe,WAExB,MAAoCpB,mBAAS,CAAC,kBAA9C,mBAAOqB,EAAP,KAAmBZ,EAAnB,KAMA,OACI,qCACE,gDACA,cAAC,EAAD,CAAWA,cAAeA,IAC1B,6BAEMY,EAAW1B,KAAI,SAAA2B,GAAS,OAAI,cAAC,EAAD,CAAyBnC,SAAWmC,GAAtBA,YCZpDC,G,MAAOC,SAASC,eAAe,SAC/BC,EAAS,cAAC,EAAD,IACfC,IAASC,OAAQF,EAASH,K","file":"static/js/main.97aeb9ec.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const GifTemplate = ({id, title, url})=> {\r\n    return (\r\n        <div className='card animate__animated animate__fadeInDown'>\r\n            <img src={url} alt={title}/>\r\n            <p className='title-card'>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","export const getGifs = async(category)=>{\r\n       \r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=15&api_key=h3Rb9s8XPCpW1vW7phjRQoO1uTG3efWT`;\r\n\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map(img =>{\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs;\r\n}","import { GifTemplate } from './GifTemplate';\r\nimport { useFetchGifs } from './Hooks/useFetchsGifs';\r\n\r\n\r\n\r\nconst GifGrid = ({category}) => {\r\n    \r\n    const {data:images, loading} = useFetchGifs(category);\r\n\r\n    return (\r\n        <div>\r\n            <h3 className='titulo-category'>{category}</h3>\r\n            {loading && <p className='animate__animated animate__fadeInDown'>Cargando, espera compare...</p>}\r\n            <div className='grid'>\r\n            {\r\n               images.map(img => <GifTemplate key={img.id} {...img}/>)\r\n            }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGrid\r\n","import { useEffect, useState } from \"react\";\r\nimport {getGifs} from '../Helpers/GetGifs'\r\n\r\nexport const useFetchGifs = (category)=>{\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(()=>{\r\n        getGifs(category)\r\n            .then(imgs =>{\r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    })\r\n            })\r\n    },[category])\r\n\r\n    return state;\r\n}","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport const SearchBar = ({setCategories}) => {\r\n\r\n    const [busqueda, setBusqueda] = useState('');\r\n    \r\n    const cambioBusqueda = (e)=>{\r\n        setBusqueda(e.target.value);\r\n    }\r\n\r\n    const sinRefresh = e =>{\r\n        e.preventDefault();\r\n        \r\n        setCategories(e=>[busqueda, ...e]);\r\n        setBusqueda('');\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={sinRefresh}>\r\n            <input\r\n            type='text'\r\n            placeholder='Busca algo'\r\n            value={busqueda}\r\n            onChange={cambioBusqueda}\r\n            >\r\n            </input>\r\n        </form>\r\n    )\r\n}\r\n\r\nSearchBar.propTypes= {\r\n    setCategories: PropTypes.func.isRequired,\r\n}","import React, {useState} from 'react'\r\nimport GifGrid from './Components/GifGrid';\r\nimport { SearchBar } from './Components/SearchBar';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One Punch Man']);\r\n\r\n    // const sumarCategoria = () => {\r\n    //     setCategories(categories =>[...categories, 'El Chavo del 8'])\r\n    // }\r\n\r\n    return (  \r\n        <>\r\n          <h1>Gif Expert App</h1>\r\n          <SearchBar setCategories={setCategories}/>\r\n          <ol>\r\n            {\r\n                categories.map(categoria => <GifGrid key={categoria} category ={categoria}/>)\r\n            }\r\n          </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nconst ruta = document.getElementById('root');\nconst cuerpo = <GifExpertApp/>\nReactDOM.render( cuerpo , ruta);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}